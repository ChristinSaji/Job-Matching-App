AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template for Job Matching Application

Resources:
  CognitoUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: "job-matching-user-pool"
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireUppercase: true
          RequireSymbols: true
      Schema:
        - AttributeDataType: "String"
          Name: "email"
          Required: true

  CognitoUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: "job-matching-app-client"
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      SupportedIdentityProviders:
        - COGNITO

  JobApplicationsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "JobApplications"
      AttributeDefinitions:
        - AttributeName: "userId"
          AttributeType: "S"
        - AttributeName: "applicationId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "userId"
          KeyType: "HASH"
        - AttributeName: "applicationId"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ExtractedTextTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "ExtractedText"
      AttributeDefinitions:
        - AttributeName: "applicationId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "applicationId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ResumesBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: "job-matching-app-resumes"
      AccessControl: "Private"

  CalculateScoreLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "CalculateScore"
      Handler: "index.handler"
      Role: "arn:aws:iam::700690205031:role/LabRole"
      Runtime: "nodejs20.x"
      Timeout: 60
      Code:
        S3Bucket: "job-matching-app-bucket"
        S3Key: "CalculateScore.zip"
      Environment:
        Variables:
          BUCKET_NAME: !Ref ResumesBucket
          APPLICATIONS_TABLE: !Ref JobApplicationsTable
          EXTRACTED_TEXT_TABLE: !Ref ExtractedTextTable

  LambdaInvokePermissionCalculateScore:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt CalculateScoreLambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${JobMatchingAPI}/*/*"

  JobMatchingAPI:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "JobMatchingAPI"
      Description: "API for job matching application"
      EndpointConfiguration:
        Types:
          - REGIONAL

  JobMatchingAPIResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt JobMatchingAPI.RootResourceId
      PathPart: "applications"
      RestApiId: !Ref JobMatchingAPI

  JobMatchingAPIPOSTMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref CognitoUserPoolAuthorizer
      HttpMethod: "POST"
      ResourceId: !Ref JobMatchingAPIResource
      RestApiId: !Ref JobMatchingAPI
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - { LambdaArn: !GetAtt CalculateScoreLambdaFunction.Arn }

  # Script Source: https://stackoverflow.com/questions/40292888/enable-cors-for-api-gateway-in-cloudformation-template#comment81922689_40322991
  JobMatchingAPIOPTIONSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref JobMatchingAPI
      ResourceId: !Ref JobMatchingAPIResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: "{}"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  CognitoUserPoolAuthorizer:
    Type: "AWS::ApiGateway::Authorizer"
    Properties:
      Name: "CognitoAuthorizer"
      RestApiId: !Ref JobMatchingAPI
      Type: "COGNITO_USER_POOLS"
      ProviderARNs:
        - !GetAtt CognitoUserPool.Arn
      IdentitySource: "method.request.header.Authorization"

  JobMatchingAPIDeployment:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref JobMatchingAPI
      StageName: prod
    DependsOn:
      - JobMatchingAPIPOSTMethod
      - JobMatchingAPIOPTIONSMethod

  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Enable SSH access and HTTP access"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"

  EC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: "t2.micro"
      KeyName: "ta-key"
      IamInstanceProfile: "LabInstanceProfile"
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      ImageId: "ami-0ba9883b710b05ac6"
      Tags:
        - Key: "Name"
          Value: "JobMatchingAppInstance"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install docker -y
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          yum install git -y
          mkdir -p /home/ec2-user/term-assignment
          cd /home/ec2-user/term-assignment
          git clone https://github.com/ChristinSaji/job-matching-app.git
          cd job-matching-app/job-matching-app
          docker build --build-arg VITE_USER_POOL_ID=${CognitoUserPool} --build-arg VITE_USER_POOL_CLIENT_ID=${CognitoUserPoolClient} --build-arg VITE_API_URL=https://${JobMatchingAPI}.execute-api.${AWS::Region}.amazonaws.com/prod -t christinsaji/job-matching-app:latest .
          docker run -p 80:80 christinsaji/job-matching-app:latest
    DependsOn: JobMatchingAPIDeployment

Outputs:
  UserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref CognitoUserPool
    Export:
      Name: "UserPoolId"

  UserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref CognitoUserPoolClient
    Export:
      Name: "UserPoolClientId"

  InstanceId:
    Description: "ID of the EC2 instance"
    Value: !Ref EC2Instance
    Export:
      Name: "InstanceId"

  InstancePublicIP:
    Description: "Public IP address of the EC2 instance"
    Value: !GetAtt EC2Instance.PublicIp
    Export:
      Name: "InstancePublicIP"

  JobApplicationsTableName:
    Description: "DynamoDB Job Applications Table Name"
    Value: !Ref JobApplicationsTable

  ExtractedTextTableName:
    Description: "DynamoDB Extracted Text Table Name"
    Value: !Ref ExtractedTextTable

  ApiGatewayEndpoint:
    Description: "API Gateway Endpoint"
    Value: !Sub "https://${JobMatchingAPI}.execute-api.${AWS::Region}.amazonaws.com/prod"
    Export:
      Name: "ApiGatewayEndpoint"
