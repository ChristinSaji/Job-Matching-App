AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template for Job Matching Application

Resources:
  CognitoUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: "job-matching-user-pool"
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireUppercase: true
          RequireSymbols: true
      Schema:
        - AttributeDataType: "String"
          Name: "email"
          Required: true

  CognitoUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: "job-matching-app-client"
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      SupportedIdentityProviders:
        - COGNITO

  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Enable SSH access and HTTP access"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"

  EC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: "t2.micro"
      KeyName: "ta-key"
      IamInstanceProfile: "LabInstanceProfile"
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      ImageId: "ami-0ba9883b710b05ac6"
      Tags:
        - Key: "Name"
          Value: "JobMatchingAppInstance"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install docker -y
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          yum install git -y
          mkdir -p /home/ec2-user/term-assignment
          cd /home/ec2-user/term-assignment
          git clone https://github.com/ChristinSaji/job-matching-app.git
          cd job-matching-app/job-matching-app
          docker build --build-arg VITE_USER_POOL_ID=${CognitoUserPool} --build-arg VITE_USER_POOL_CLIENT_ID=${CognitoUserPoolClient} -t christinsaji/job-matching-app:latest .
          docker run -p 80:80 christinsaji/job-matching-app:latest

  JobApplicationsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "JobApplications"
      AttributeDefinitions:
        - AttributeName: "userId"
          AttributeType: "S"
        - AttributeName: "applicationId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "userId"
          KeyType: "HASH"
        - AttributeName: "applicationId"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ExtractedTextTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "ExtractedText"
      AttributeDefinitions:
        - AttributeName: "applicationId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "applicationId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

Outputs:
  UserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref CognitoUserPool
    Export:
      Name: "UserPoolId"

  UserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref CognitoUserPoolClient
    Export:
      Name: "UserPoolClientId"

  InstanceId:
    Description: "ID of the EC2 instance"
    Value: !Ref EC2Instance
    Export:
      Name: "InstanceId"

  InstancePublicIP:
    Description: "Public IP address of the EC2 instance"
    Value: !GetAtt EC2Instance.PublicIp
    Export:
      Name: "InstancePublicIP"

  JobApplicationsTableName:
    Description: "DynamoDB Job Applications Table Name"
    Value: !Ref JobApplicationsTable

  ExtractedTextTableName:
    Description: "DynamoDB Extracted Text Table Name"
    Value: !Ref ExtractedTextTable
